
-- ################################################## --
-- #################### FUNCTION #################### --
-- ################################################## --

/* CRIAR MODULO */
CREATE OR REPLACE FUNCTION CRIAR_MODULO(COD_MODULO INT, NOME_MODULO TEXT, DESCRICAO_MODULO TEXT, DURACAO INT, CODIGO_CURSO INT)
RETURNS VOID
AS $$
BEGIN
    INSERT INTO MODULO VALUES (COD_MODULO, NOME_MODULO, DESCRICAO_MODULO, DURACAO, CODIGO_CURSO);
END
$$ LANGUAGE plpgsql

--------------------------------------------------------------------------------------------------------------------------------

/* CRIAR MODULOS EM GRANDE QUANTIDADE EM MATRIZ */
CREATE OR REPLACE FUNCTION MATRIZ_MODULO(COD_CURSO INT, NOME_MODULO TEXT[], DESCRICAO_MODULO TEXT[], DURACAO_MODULO INT[])
RETURNS VOID
AS $$
DECLARE
	CURSO_EXISTE INT := CURSO_EXISTE(COD_CURSO);
	CONTADOR INT := 1;
BEGIN
	IF CURSO_EXISTE IS NOT NULL THEN
		WHILE CONTADOR <= ARRAY_LENGTH(NOME_MODULO,1) LOOP
			INSERT INTO MODULO VALUES (DEFAULT, 
			NOME_MODULO[CONTADOR], DESCRICAO_MODULO[CONTADOR], DURACAO_MODULO[CONTADOR], COD_CURSO);
			CONTADOR := CONTADOR + 1;
		END LOOP;
	END IF;
END
$$ LANGUAGE plpgsql

--------------------------------------------------------------------------------------------------------------------------------

/* RETORNA COD_PROFESSOR */
CREATE OR REPLACE FUNCTION RETORNA_COD_PROFESSOR(CPF_PROFESSOR TEXT)
RETURNS TABLE (PROFESSOR_CODIGO INT)
AS $$
BEGIN
    RETURN QUERY SELECT COD_PROFESSOR FROM PROFESSOR P_F WHERE P_F.CPF = CPF_PROFESSOR;
END
$$ LANGUAGE plpgsql

--------------------------------------------------------------------------------------------------------------------------------

/* VERIFICA SE ESSE CURSO SOLICITADO ATRAVEZ DO ID EXISTE */
CREATE OR REPLACE FUNCTION CURSO_EXISTE(CODIGO_CURSO INT)
RETURNS INT
AS $$
DECLARE
	CURSO_EXISTE INT;
BEGIN
	SELECT C_R.COD_CURSO INTO CURSO_EXISTE FROM CURSO C_R WHERE C_R.COD_CURSO = CODIGO_CURSO;
	
	IF CURSO_EXISTE IS NOT NULL THEN
		RETURN CURSO_EXISTE;
		
	ELSE
		RAISE EXCEPTION 'ESSE CURSO NÃO EXISTE! INFORME O CODIGO DE UM CURSO EXISTENTE...';
	END IF;
END
$$ LANGUAGE plpgsql

--------------------------------------------------------------------------------------------------------------------------------

/* VERIFICA SE ESSE MODULO SOLICITADO ATRAVEZ DO ID EXISTE */
CREATE OR REPLACE FUNCTION MODULO_EXISTE(CODIGO_CURSO INT, CODIGO_MODULO INT)
RETURNS INT
AS $$
DECLARE
	CURSO_EXISTE INT := CURSO_EXISTE(CODIGO_CURSO);
	MODULO_EXISTE INT;
BEGIN
	IF CURSO_EXISTE IS NOT NULL THEN
		SELECT M_D.COD_MODULO INTO MODULO_EXISTE FROM CURSO C_R INNER JOIN MODULO M_D ON
		C_R.COD_CURSO = M_D.COD_CURSO WHERE M_D.COD_MODULO = CODIGO_MODULO;	
		
		IF MODULO_EXISTE IS NOT NULL THEN
			RETURN MODULO_EXISTE;
			
		ELSE
			RAISE EXCEPTION 'ESSE MODULO NÃO EXISTE! INFORME O CODIGO DE UM MODULO EXISTENTE...';
		END IF;
	END IF;
END
$$ LANGUAGE plpgsql

--------------------------------------------------------------------------------------------------------------------------------

/* VERIFICA SE ESSE DISCIPLINA SOLICITADO ATRAVEZ DO ID EXISTE */
CREATE OR REPLACE FUNCTION DISCIPLINA_EXISTENTE(CODIGO_CURSO INT, CODIGO_MODULO INT, CODIGO_DISCIPLINA INT)
RETURNS INT
AS $$
DECLARE
	MODULO_EXISTE INT := MODULO_EXISTE(CODIGO_CURSO, CODIGO_MODULO);
	DISCIPLINA_EXISTENTE INT;
BEGIN
	IF MODULO_EXISTE IS NOT NULL THEN
		SELECT D_C.COD_DISCIPLINA INTO DISCIPLINA_EXISTENTE FROM CURSO C_R INNER JOIN MODULO M_D ON
		C_R.COD_CURSO = M_D.COD_CURSO INNER JOIN DISCIPLINA D_C ON
		M_D.COD_MODULO = D_C.COD_MODULO WHERE M_D.COD_MODULO = CODIGO_MODULO AND 
		D_C.COD_DISCIPLINA = CODIGO_DISCIPLINA;	
		
		IF DISCIPLINA_EXISTENTE IS NOT NULL THEN
			RETURN DISCIPLINA_EXISTENTE;
			
		ELSE
			RAISE EXCEPTION 'ESSA DISCIPLINA NÃO EXISTE! INFORME O CODIGO DE UMA DISCIPLINA EXISTENTE...';
		END IF;
	END IF;
END
$$ LANGUAGE plpgsql

--------------------------------------------------------------------------------------------------------------------------------

/* CRIAR DISCIPLINA EM GRANDE QUANTIDADE EM MATRIZ */
CREATE OR REPLACE FUNCTION MATRIZ_CRIAR_DISCIPLINA(NOME_DISCIPLINA TEXT[][], DESCRICAO_DISCIPLINA TEXT[], COD_MODULO INT, 
COD_PROFESSOR INT, INDICE_VETOR INT)
RETURNS VOID
AS $$
DECLARE
	CONTADOR INT := 0;
	INDICE_DADO INT := 1;
BEGIN
	
	CREATE TEMP TABLE ARRAY_CONTEUDO(DADOS TEXT[][]);
	INSERT INTO ARRAY_CONTEUDO VALUES(NOME_DISCIPLINA);
	
	WHILE CONTADOR = 0 LOOP
		IF INDICE_DADO <= (SELECT ARRAY_LENGTH(DADOS,2) FROM ARRAY_CONTEUDO) AND (SELECT DADOS[INDICE_VETOR][INDICE_DADO] FROM ARRAY_CONTEUDO) IS NOT NULL THEN
			INSERT INTO DISCIPLINA VALUES
			(DEFAULT,(SELECT DADOS[INDICE_VETOR][INDICE_DADO] FROM ARRAY_CONTEUDO),
			 DESCRICAO_DISCIPLINA[INDICE_DADO], COD_MODULO, COD_PROFESSOR);
			INDICE_DADO := INDICE_DADO + 1;
		ELSE
			CONTADOR := CONTADOR + 1;
		END IF;
	END LOOP;
	DISCARD TEMP;
END
$$ LANGUAGE plpgsql

--------------------------------------------------------------------------------------------------------------------------------

/* CRIANDO UMA DISCIPLINA PARA ALGUM MODULO */
CREATE OR REPLACE FUNCTION CRIAR_DISCIPLINAS(COD_CURSO INT, CODIGO_MODULO INT, 
NOME_DISCIPLINA TEXT[], DESCRICAO_DISCIPLINA TEXT[], COD_PROFESSOR INT)
RETURNS VOID
AS $$
DECLARE
	MODULO_EXISTENTE INT := MODULO_EXISTE(COD_CURSO, CODIGO_MODULO);
	CONTADOR INT := 1;
BEGIN
	
	IF MODULO_EXISTENTE = CODIGO_MODULO THEN
		WHILE CONTADOR <= ARRAY_LENGTH(NOME_DISCIPLINA,1) LOOP
			INSERT INTO DISCIPLINA VALUES (DEFAULT, NOME_DISCIPLINA[CONTADOR], DESCRICAO_DISCIPLINA[CONTADOR], CODIGO_MODULO, COD_PROFESSOR);
			CONTADOR := CONTADOR + 1;
		END LOOP;
	ELSE
		RAISE EXCEPTION 'ESSE MODULO NÃO EXISTE, INSIRA UM MODULO VALIDO!';
	END IF;
END
$$ LANGUAGE plpgsql

--------------------------------------------------------------------------------------------------------------------------------

/* ADICIONANDO VIDEO AULAS AS DISCIPLINAS EM GRANDE QUANTIDADE MATRIZ  */
CREATE OR REPLACE FUNCTION ADICIONAR_VIDEO_AULA(COD_CURSO INT, COD_MODULO INT, 
COD_DISCIPLINA INT, TITULO_VIDEO TEXT[], DESCRICAO TEXT[], DURACAO INT[])
RETURNS VOID
AS $$
DECLARE
	DISCIPLINA_EXISTENTE INT = DISCIPLINA_EXISTENTE(COD_CURSO, COD_MODULO, COD_DISCIPLINA);
	CONTADOR INT := 1;
BEGIN

	IF DISCIPLINA_EXISTENTE IS NOT NULL THEN
		WHILE CONTADOR <= ARRAY_LENGTH(TITULO_VIDEO,1) LOOP
			INSERT INTO VIDEO_AULA VALUES (DEFAULT, TITULO_VIDEO[CONTADOR], DESCRICAO[CONTADOR], DURACAO[CONTADOR], COD_DISCIPLINA);
			CONTADOR := CONTADOR + 1;
		END LOOP;
	END IF;
END
$$ LANGUAGE plpgsql

--------------------------------------------------------------------------------------------------------------------------------

/* CRIAR CURSO INSTANCIA VARIAS FUNÇÕES */
CREATE OR REPLACE FUNCTION CRIAR_CURSO(CPF_PROFESSOR TEXT, SENHA_PROFESSOR INT, 
NOME TEXT, DESCRICAO TEXT, DURACAO_CURSO FLOAT,PRECO FLOAT, NUMERO_MODULOS INT, 
DURACAO_MODULO INT, DESCRICAO_MODULO TEXT[], NOME_DISCIPLINA TEXT[][], DESCRICAO_DISCIPLINA TEXT[])
RETURNS VOID
AS $$
DECLARE
	CODIGO_CURSO INT := (SELECT MAX(COD_PROFESSOR) FROM PROFESSOR); /* COD_PROFESSOR */
	COD_PROFESSOR INT := RETORNA_COD_PROFESSOR(CPF_PROFESSOR);
    CONTADOR INT := 1;
BEGIN
    INSERT INTO CURSO VALUES
	(CODIGO_CURSO, NOME, DESCRICAO, DURACAO_CURSO, PRECO, NUMERO_MODULOS, NULL, NULL, FALSE, COD_PROFESSOR);
	
	WHILE CONTADOR <= NUMERO_MODULOS LOOP
        PERFORM CRIAR_MODULO((CODIGO_CURSO + CONTADOR), CONCAT('MODULO ', CONTADOR), DESCRICAO_MODULO[CONTADOR], DURACAO_MODULO, CODIGO_CURSO);
		PERFORM MATRIZ_CRIAR_DISCIPLINA(NOME_DISCIPLINA, DESCRICAO_DISCIPLINA, (CODIGO_CURSO + CONTADOR), COD_PROFESSOR, CONTADOR);
		CONTADOR := CONTADOR + 1;
    END LOOP;
END
$$ LANGUAGE plpgsql

--------------------------------------------------------------------------------------------------------------------------------