/* CRIAR MODULO */
CREATE OR REPLACE FUNCTION CRIAR_MODULO(COD_MODULO INT, NOME_MODULO TEXT, DESCRICAO_MODULO TEXT, DURACAO INT, CODIGO_CURSO INT)
RETURNS VOID
AS $$
BEGIN
    INSERT INTO MODULO VALUES (COD_MODULO, NOME_MODULO, DESCRICAO_MODULO, DURACAO, CODIGO_CURSO);
END
$$ LANGUAGE plpgsql

/* RETORNA COD_PROFESSOR */
CREATE OR REPLACE FUNCTION RETORNA_COD_PROFESSOR(CPF_PROFESSOR TEXT)
RETURNS TABLE (PROFESSOR_CODIGO INT)
AS $$
BEGIN
    RETURN QUERY SELECT COD_PROFESSOR FROM PROFESSOR P_F WHERE P_F.CPF = CPF_PROFESSOR;
END
$$ LANGUAGE plpgsql

/* CRIAR DISCIPLINA */
CREATE OR REPLACE FUNCTION CRIAR_DISCIPLINA(NOME_DISCIPLINA TEXT[][], DESCRICAO_DISCIPLINA TEXT[], COD_MODULO INT, 
COD_PROFESSOR INT, INDICE_VETOR INT)
RETURNS VOID
AS $$
DECLARE
	CONTADOR INT := 0;
	INDICE_DADO INT := 1;
BEGIN
	
	CREATE TEMP TABLE ARRAY_CONTEUDO(DADOS TEXT[][]);
	INSERT INTO ARRAY_CONTEUDO VALUES(NOME_DISCIPLINA);
	
	WHILE CONTADOR = 0 LOOP
		IF INDICE_DADO <= (SELECT ARRAY_LENGTH(DADOS,2) FROM ARRAY_CONTEUDO) AND (SELECT DADOS[INDICE_VETOR][INDICE_DADO] FROM ARRAY_CONTEUDO) IS NOT NULL THEN
			INSERT INTO DISCIPLINA VALUES
			(DEFAULT,(SELECT DADOS[INDICE_VETOR][INDICE_DADO] FROM ARRAY_CONTEUDO),
			 DESCRICAO_DISCIPLINA[INDICE_DADO], COD_MODULO, COD_PROFESSOR);
			INDICE_DADO := INDICE_DADO + 1;
		ELSE
			CONTADOR := CONTADOR + 1;
		END IF;
	END LOOP;
	DISCARD TEMP;
END
$$ LANGUAGE plpgsql

/* CRIANDO UMA DISCIPLINA PARA ALGUM MODULO */
CREATE OR REPLACE FUNCTION CRIAR_UMA_DISCIPLINA(CODIGO_MODULO INT, 
NOME_DISCIPLINA TEXT, DESCRICAO_DISCIPLINA TEXT, COD_PROFESSOR INT)
RETURNS VOID
AS $$
DECLARE
	MODULO INT := (SELECT D_C.COD_MODULO FROM DISCIPLINA D_C WHERE D_C.COD_MODULO = CODIGO_MODULO LIMIT 1);
BEGIN
	IF MODULO = CODIGO_MODULO THEN
		INSERT INTO DISCIPLINA VALUES (DEFAULT, NOME_DISCIPLINA, DESCRICAO_DISCIPLINA, CODIGO_MODULO, COD_PROFESSOR);
	ELSE
		RAISE EXCEPTION 'ESSE MODULO NÃƒO EXISTE, INSIRA UM MODULO VALIDO!';
	END IF;
END
$$ LANGUAGE plpgsql

/* ADICIONANDO VIDEO AULAS AS DISCIPLINAS  */
CREATE OR REPLACE FUNCTION ADICIONAR_VIDEO_AULA(TITULO_VIDEO TEXT, DESCRICAO TEXT, DURACAO INT, COD_DISCIPLINA INT)
RETURNS VOID
AS $$
BEGIN
	INSERT INTO VIDEO_AULA VALUES (DEFAULT, TITULO_VIDEO, DESCRICAO, DURACAO, COD_DISCIPLINA);
END
$$ LANGUAGE plpgsql

/* CRIAR CURSO */
CREATE OR REPLACE FUNCTION CRIAR_CURSO(CPF_PROFESSOR TEXT, SENHA_PROFESSOR INT, 
NOME TEXT, DESCRICAO TEXT, DURACAO_CURSO FLOAT,PRECO FLOAT, NUMERO_MODULOS INT, 
DURACAO_MODULO INT, DESCRICAO_MODULO TEXT[], NOME_DISCIPLINA TEXT[][], DESCRICAO_DISCIPLINA TEXT[])
RETURNS VOID
AS $$
DECLARE
	CODIGO_CURSO INT := (SELECT MAX(COD_PROFESSOR) FROM PROFESSOR);
	COD_PROFESSOR INT := RETORNA_COD_PROFESSOR(CPF_PROFESSOR);
    CONTADOR INT := 1;
BEGIN
    INSERT INTO CURSO VALUES
	(CODIGO_CURSO, NOME, DESCRICAO, DURACAO_CURSO, PRECO, NUMERO_MODULOS, NULL, NULL, COD_PROFESSOR);
	
	WHILE CONTADOR <= NUMERO_MODULOS LOOP
        PERFORM CRIAR_MODULO((CODIGO_CURSO + CONTADOR), CONCAT('MODULO ', CONTADOR), DESCRICAO_MODULO[CONTADOR], DURACAO_MODULO, CODIGO_CURSO);
		PERFORM CRIAR_DISCIPLINA(NOME_DISCIPLINA, DESCRICAO_DISCIPLINA, (CODIGO_CURSO + CONTADOR), COD_PROFESSOR, CONTADOR);
		CONTADOR := CONTADOR + 1;
    END LOOP;
END
$$ LANGUAGE plpgsql

/* EVENTO QUE ESCUTA A TABELA CURSO */
CREATE TRIGGER EVENTO_CURSO
BEFORE INSERT
ON CURSO
FOR EACH ROW
EXECUTE PROCEDURE NOME_DA_FUNCTION 


/*

SELECT * FROM CURSO C_R INNER JOIN MODULO M_D ON
C_R.COD_CURSO = M_D.COD_CURSO INNER JOIN DISCIPLINA D_C ON
M_D.COD_MODULO = D_C.COD_MODULO INNER JOIN VIDEO_AULA V_A ON
D_C.COD_DISCIPLINA = V_A.COD_DISCIPLINA

*/